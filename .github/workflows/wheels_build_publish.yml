# Build and publish Python distribution package to TestPyPI and PyPI
# Trigger build only when a tag is pushed
name: Build and publish wheels

on:
  push:
    tags:
      - v* # Push events to v* tags
  # Manual run
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  # Build wheels for Linux, macOS, and Windows
  build_wheels:
    name: Wheel for ${{ matrix.os }}-${{ matrix.cibw_build }}_${{ matrix.cibw_archs }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Build the other wheels even if one fails
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest,  cibw_archs: x86_64,   cibw_build: 'cp*-manylinux*' }
          - { os: ubuntu-latest,  cibw_archs: x86_64,   cibw_build: 'cp*-musllinux*' }
          - { os: ubuntu-latest,  cibw_archs: x86_64,   cibw_build: 'pp*'            }
          - { os: ubuntu-latest,  cibw_archs: aarch64,  cibw_build: 'cp*-manylinux*' }
          - { os: ubuntu-latest,  cibw_archs: aarch64,  cibw_build: 'cp*-musllinux*' }
          - { os: ubuntu-latest,  cibw_archs: aarch64,  cibw_build: 'pp*'            }
          - { os: ubuntu-latest,  cibw_archs: i686,     cibw_build: 'cp*-manylinux*' }
          - { os: ubuntu-latest,  cibw_archs: i686,     cibw_build: 'cp*-musllinux*' }
          - { os: ubuntu-latest,  cibw_archs: i686,     cibw_build: 'pp*'            }
          - { os: macos-latest,   cibw_archs: x86_64,   cibw_build: 'cp*'            }
          - { os: macos-latest,   cibw_archs: x86_64,   cibw_build: 'pp*'            }
          - { os: macos-latest,   cibw_archs: arm64,    cibw_build: 'cp*'            }
          - { os: windows-latest, cibw_archs: AMD64,    cibw_build: 'cp*'            }
          - { os: windows-latest, cibw_archs: AMD64,    cibw_build: 'pp*'            }
          - { os: windows-latest, cibw_archs: x86,      cibw_build: 'cp*'            }
          # Building wheels not working for Windows ARM64
          # - { os: windows-latest, cibw_archs: ARM64,    cibw_build: 'cp*'            }
          # PyPy not supported for macOS ARM (need to run on an Apple Silicon machine)
          # - { os: macos-latest,   cibw_archs: arm64,    cibw_build: 'pp*'            }

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
        if: matrix.cibw_archs == 'aarch64'

      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair -w {dest_dir} {wheel}
        with:
          output-dir: wheelhouse

      - name: Show files
        run: ls -lh wheelhouse
        shell: bash

      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl

  # Build source distribution on Linux
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: python -m pip install setuptools twine

    - name: Build source tarball
      run: python setup.py sdist

    - name: Check metadata
      run: twine check dist/*.tar.gz

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz

  # Upload the wheels and the source distribution
  upload_pypi:
    name: Upload to TestPyPI and PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest

    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifact
        path: dist

    - name: Publish package to TestPyPI
      uses: pypa/gh-action-pypi-publish@v1.8.11
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.11
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
